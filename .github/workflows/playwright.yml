name: CS308 E-Commerce Platform Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    services:
      # Set up PostgreSQL service for testing
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: cs308_test_db
        ports:
          - 5432:5432
        # Health check to ensure postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      # Set up Redis service for Django cache/Celery
      redis:
        image: redis:6
        ports:
          - 6379:6379
        # Health check to ensure redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout frontend code
      uses: actions/checkout@v4
      
    # Clone the backend repository separately
    - name: Checkout backend repository
      uses: actions/checkout@v4
      with:
        repository: Tolgabbao/backend
        path: backend
      
    # Setup Python for Django backend
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    # Install backend dependencies
    - name: Install Django backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Run Django migrations and initialize database
    - name: Set up Django database
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cs308_test_db
        DJANGO_SECRET_KEY: 'test_secret_key_for_github_actions'
        DEBUG: 'True'
        ALLOWED_HOSTS: '*'
        CORS_ALLOWED_ORIGINS: 'http://localhost:3000'
      run: |
        python manage.py migrate
        # Create a superuser for testing
        echo "from accounts.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'adminpassword', is_staff=True)" | python manage.py shell
        
    # Start the backend server in background
    - name: Run Django server
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cs308_test_db
        DJANGO_SECRET_KEY: 'test_secret_key_for_github_actions'
        DEBUG: 'True'
        ALLOWED_HOSTS: '*'
        CORS_ALLOWED_ORIGINS: 'http://localhost:3000'
      run: |
        python manage.py runserver 8000 > server.log 2>&1 &
        sleep 5  # Give the server time to start
        
    # Setup Node.js for Frontend
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
        
    # Install Frontend dependencies
    - name: Install frontend dependencies
      run: npm ci
      
    # Set up environment variables for frontend
    - name: Create .env.local
      run: |
        echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > .env.local
        echo "NEXT_PUBLIC_PLACEHOLDER_IMAGE=/placeholder.png" >> .env.local
        
    # Build the frontend
    - name: Build frontend
      run: npm run build
      
    # Start the frontend server in background
    - name: Start frontend
      run: |
        npm run start > frontend.log 2>&1 &
        sleep 10  # Give the server time to start
        
    # Install Playwright browsers
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    # Run Playwright tests
    - name: Run Playwright tests
      env:
        # Configure test environment variables
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000
      run: npx playwright test
      
    # Upload test report artifacts
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    # Upload logs on failure
    - name: Upload logs if tests fail
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: server-logs
        path: |
          backend/server.log
          frontend.log
        retention-days: 3
